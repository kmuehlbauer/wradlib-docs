{
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {
      "nbsphinx": "hidden"
     },
     "source": [
      "This notebook is part of the $\\omega radlib$ documentation: http://wradlib.org/wradlib-docs.\n",
      "\n",
      "Copyright (c) 2016, $\\omega radlib$ developers.\n",
      "Distributed under the MIT License. See LICENSE.txt for more info."
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "API-Change "
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This notebook shows $\\omega radlib's$ ability to warn the user of pending changes in the api. Function-`@decorators` are used for this. With the `@deprecated`-decorator a `DeprecationWarning` is issued, while the `@apichange_kwarg`-decorator issues `DeprecationWarning` about changes in the calling parameters. Besides warning the new behaviour can already be utilized by a given transformation function."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# import section\n",
      "import sys\n",
      "import warnings\n",
      "#warnings.filterwarnings('ignore')\n",
      "import numpy as np\n",
      "import matplotlib.pyplot as pl\n",
      "try:\n",
      "    get_ipython().magic(\"matplotlib inline\")\n",
      "except:\n",
      "    pl.ion()\n",
      "\n",
      "with warnings.catch_warnings():\n",
      "    warnings.filterwarnings(\"always\",category=DeprecationWarning)\n",
      "    import wradlib as wrl"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Deprecation Warning"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "@wrl.util.deprecated()\n",
      "def old_function(z):\n",
      "    return z"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "old_function(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/travis/miniconda/envs/wradlib/lib/python2.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: __main__.old_function is deprecated\n",
        "  \"\"\"Entry point for launching an IPython kernel.\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "def new_function(x):\n",
      "    return 0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "@wrl.util.deprecated(new_function)\n",
      "def old_function(z):\n",
      "    return z"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "old_function(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/travis/miniconda/envs/wradlib/lib/python2.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: __main__.old_function is deprecated; use <function new_function at 0x7f3e313cb410> instead\n",
        "  \"\"\"Entry point for launching an IPython kernel.\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Future Change"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "First, we define the function, where the api will be changed. The function takes parameter ``z`` and keyword argument ``x``, which excepts type `str` and defaults to none.\n",
      "\n",
      "The new behaviour is to accept only ``int``. We define our function decorator as:\n",
      "\n",
      "```python\n",
      "@wrl.util.apichange_kwarg(\"0.6.0\", par='x', typ=str, msg=\"x will take int data in the future\")\n",
      "```\n",
      "\n",
      "This means that the api-change takes place from version ``0.6.0`` on, it affects parameter ``x``, which is of type ``str`` and it will display the message \"x will take int data in the future\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "@wrl.util.apichange_kwarg(\"0.6.0\", par='x', typ=str, msg=\"x will take int data in the future\")\n",
      "def futurechange(z, x=None):\n",
      "    if isinstance(x, str):\n",
      "        print(z, x, type(x),\n",
      "              \"normal function behaviour, DeprecationWarning is issued\")\n",
      "    elif isinstance(x, type(None)):\n",
      "        print(z, x, type(x),\n",
      "              \"normal function behaviour, no DeprecationWarning\")\n",
      "    else:\n",
      "        print(z, x, type(x),\n",
      "              \"using wrong type here, no DeprecationWarning, \"\n",
      "              \"but TypeError will be raised\")\n",
      "        raise TypeError(\"Wrong Input %s, 'str' expected\" % type(x))\n",
      "    sys.stdout.flush()\n",
      "    return z, x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "futurechange(0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(0, None, <type 'NoneType'>, 'normal function behaviour, no DeprecationWarning')\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "(0, None)"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "futurechange(1, x='10')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(1, '10', <type 'str'>, 'normal function behaviour, DeprecationWarning is issued')\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/travis/miniconda/envs/wradlib/lib/python2.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: \n",
        "Previous behaviour of parameter 'x' in function '__main__.futurechange' is deprecated \n",
        "and will be changed in version '0.6.0'.\n",
        "x will take int data in the future\n",
        "  \"\"\"Entry point for launching an IPython kernel.\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "(1, '10')"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "try:\n",
      "    futurechange(2, x=20)\n",
      "except TypeError as e:\n",
      "    print(\"Type error: {0}\".format(e))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(2, 20, <type 'int'>, 'using wrong type here, no DeprecationWarning, but TypeError will be raised')\n",
        "Type error: Wrong Input <type 'int'>, 'str' expected\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Type Changed"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "When the API has changed finally, we just adapt the ``@decorator`` and we need to define a transformation function for the keyword parameter:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "def help_function(x):\n",
      "    return int(x)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "@wrl.util.apichange_kwarg(\"0.6.0\", par='x', typ=str, exfunc=help_function)\n",
      "def typechanged(z, x=None):\n",
      "    if isinstance(x, int):\n",
      "        print(z, x, type(x), \"normal function behaviour or type change, \"\n",
      "                             \"DeprecationWarning is issued when 'x' \"\n",
      "                             \"is type(str)\")\n",
      "    elif isinstance(x, type(None)):\n",
      "        print(z, x, type(x),\n",
      "              \"normal function behaviour, no DeprecationWarning\")\n",
      "    else:\n",
      "        print(z, x, type(x),\n",
      "              \"using wrong type here, TypeError will be raised\")\n",
      "        raise TypeError(\"Wrong Input %s, 'int' expected\" % type(x))\n",
      "    sys.stdout.flush()\n",
      "    return z, x"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "typechanged(0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(0, None, <type 'NoneType'>, 'normal function behaviour, no DeprecationWarning')\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "(0, None)"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "typechanged(3, x='30')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(3, 30, <type 'int'>, \"normal function behaviour or type change, DeprecationWarning is issued when 'x' is type(str)\")\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/travis/miniconda/envs/wradlib/lib/python2.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: \n",
        "Previous behaviour of parameter 'x' in function '__main__.typechanged' is deprecated \n",
        "and will be changed in version '0.6.0'.\n",
        "Wrong parameter types will be automatically converted by using __main__.help_function.\n",
        "  \"\"\"Entry point for launching an IPython kernel.\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "(3, 30)"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "typechanged(4, x=40)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(4, 40, <type 'int'>, \"normal function behaviour or type change, DeprecationWarning is issued when 'x' is type(str)\")\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "(4, 40)"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Name Changed"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "If the name of the keyword argument has already changed, here from `x` to `y`."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "@wrl.util.apichange_kwarg(\"0.6.0\", par='x', typ=str, expar='y')\n",
      "def namechanged(z, y=None):\n",
      "    if isinstance(y, str):\n",
      "        print(z, y, type(y), \"DeprecationWarning\")\n",
      "    elif isinstance(y, type(None)):\n",
      "        print(z, y, type(y),\n",
      "              \"normal function behaviour, no DeprecationWarning\")\n",
      "    else:\n",
      "        print(z, y, type(y), \"using wrong type here, TypeError is issued\")\n",
      "        raise TypeError(\"Wrong Input %s, 'str' expected\" % type(y))\n",
      "    sys.stdout.flush()\n",
      "    return z, y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "namechanged(0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(0, None, <type 'NoneType'>, 'normal function behaviour, no DeprecationWarning')\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "(0, None)"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "namechanged(5, x='50')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(5, '50', <type 'str'>, 'DeprecationWarning')\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/travis/miniconda/envs/wradlib/lib/python2.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: \n",
        "Previous behaviour of parameter 'x' in function '__main__.namechanged' is deprecated \n",
        "and will be changed in version '0.6.0'.\n",
        "Use parameter y instead.\n",
        "  \"\"\"Entry point for launching an IPython kernel.\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "(5, '50')"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "try:\n",
      "    namechanged(6, x=60)\n",
      "except TypeError as e:\n",
      "    print(\"Type error: {0}\".format(e))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Type error: namechanged() got an unexpected keyword argument 'x'\n"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "namechanged(7, y='70')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(7, '70', <type 'str'>, 'DeprecationWarning')\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "(7, '70')"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "try:\n",
      "    namechanged(8, y=80)\n",
      "except TypeError as e:\n",
      "    print(\"Type error: {0}\".format(e))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(8, 80, <type 'int'>, 'using wrong type here, TypeError is issued')\n",
        "Type error: Wrong Input <type 'int'>, 'str' expected\n"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Name and Type changed"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "@wrl.util.apichange_kwarg(\"0.6.0\", par='x', typ=str, expar='y',\n",
      "                          exfunc=help_function)\n",
      "def name_and_type_changed(z, y=None):\n",
      "    if isinstance(y, int):\n",
      "        print(z, y, type(y),\n",
      "              \"normal function behaviour or paramter and type change, \"\n",
      "              \"DeprecationWarning is issued when 'x' is given\")\n",
      "    elif isinstance(y, type(None)):\n",
      "        print(z, y, type(y),\n",
      "              \"normal function behaviour, no DeprecationWarning\")\n",
      "    else:\n",
      "        print(z, y, type(y),\n",
      "              \"using wrong type here, TypeError will be raised\")\n",
      "        raise TypeError(\"Wrong Input %s, 'str' expected\" % type(y))\n",
      "    return z, y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "name_and_type_changed(0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(0, None, <type 'NoneType'>, 'normal function behaviour, no DeprecationWarning')\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "(0, None)"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "name_and_type_changed(9, x='90')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(9, 90, <type 'int'>, \"normal function behaviour or paramter and type change, DeprecationWarning is issued when 'x' is given\")\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/travis/miniconda/envs/wradlib/lib/python2.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: \n",
        "Previous behaviour of parameter 'x' in function '__main__.name_and_type_changed' is deprecated \n",
        "and will be changed in version '0.6.0'.\n",
        "Use parameter y instead.\n",
        "Wrong parameter types will be automatically converted by using __main__.help_function.\n",
        "  \"\"\"Entry point for launching an IPython kernel.\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "(9, 90)"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "try:\n",
      "    name_and_type_changed(10, x=100)\n",
      "except TypeError as e:\n",
      "    print(\"Type error: {0}\".format(e))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Type error: name_and_type_changed() got an unexpected keyword argument 'x'\n"
       ]
      }
     ],
     "prompt_number": 25
    }
   ],
   "metadata": {}
  }
 ]
}
