{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbsphinx": "hidden"
   },
   "source": [
    "This notebook is part of the $\\omega radlib$ documentation: http://wradlib.org/wradlib-docs.\n",
    "\n",
    "Copyright (c) 2016, $\\omega radlib$ developers.\n",
    "Distributed under the MIT License. See LICENSE.txt for more info."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dealing with time series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dealing with radar data typically means implies dealing with time series (of radar records or rain gauge observations). This article gives a brief intro on how to deal with times series and datetimes in Python.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The datetime module\n",
    "\n",
    "The datetime module provides a number of types to deal with dates, times, and time intervals. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are different ways to create datetime objects.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# This is now (system time)\n",
    "now = dt.datetime.now()\n",
    "# Just using the date\n",
    "birth_van_rossum = dt.datetime(1956, 1, 31)\n",
    "# Providing both date and time\n",
    "first_wradlib_commit = dt.datetime(2011, 10, 26, 11, 54, 58)\n",
    "# Or initialising from a string\n",
    "erad_2016_begins = dt.datetime.strptime(\"2016-10-09 09:00:00\", \"%Y-%m-%d %H:%M:%S\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can compute the difference between two datetime objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a <type 'datetime.timedelta'> object.\n",
      "\n",
      "It looks like this: datetime.timedelta(22424, 41175, 710344)\n",
      "and consists of\n",
      "\t22424 days,\n",
      "\t41175 seconds,\n",
      "\tand 710344 microseconds.\n",
      "\n",
      "Guido van Rossum is 1937474775 seconds old.\n",
      "wradlib's first commit was 2066 days ago.\n",
      "The ERAD 2016 OSS Short course took place 257 days ago.\n"
     ]
    }
   ],
   "source": [
    "# Age of Guido van Rossum\n",
    "age_van_rossum = now - birth_van_rossum\n",
    "print(\"This is a %r object.\\n\" % type(age_van_rossum) )\n",
    "print(\"It looks like this: %r\" % age_van_rossum )\n",
    "print(\"and consists of\\n\\t%d days,\\n\\t%d seconds,\\n\\tand %d microseconds.\\n\" \n",
    "      % (age_van_rossum.days, age_van_rossum.seconds, age_van_rossum.microseconds) )\n",
    "# Age of wradlib\n",
    "age_wradlib = now - first_wradlib_commit\n",
    "# Time until (or since) beginning of ERAD 2016 OSS Short course\n",
    "from_to_erad2016 = now - erad_2016_begins\n",
    "\n",
    "print(\"Guido van Rossum is %d seconds old.\" % age_van_rossum.total_seconds())\n",
    "print(\"wradlib's first commit was %d days ago.\" % age_wradlib.days)\n",
    "if from_to_erad2016.total_seconds() < 0:\n",
    "    print(\"The ERAD 2016 OSS Short course will start in %d days.\" % -from_to_erad2016.days )\n",
    "else:\n",
    "    print(\"The ERAD 2016 OSS Short course took place %d days ago.\" % from_to_erad2016.days)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you can create a `datetime.timedelta` object yourself \n",
    "and add/subtract a time interval from/to a `datetime` object.\n",
    "You can use any of these keywords: `days, seconds, microseconds, milliseconds, minutes, hours, weeks`,\n",
    "but `datetime.timedelta` will always represent the result in `days, seconds, microseconds`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:02:00\n",
      "0:02:00\n",
      "This is now: 2017-06-23 11:26:15.780268\n",
      "This is two minutes before: 2017-06-23 11:24:15.780268\n"
     ]
    }
   ],
   "source": [
    "# This is an interval of two minutes\n",
    "print(dt.timedelta(minutes=1, seconds=60))\n",
    "# And this is, too\n",
    "print(dt.timedelta(minutes=2))\n",
    "now = dt.datetime.now()\n",
    "print(\"This is now: %s\" % now)\n",
    "print(\"This is two minutes before: %s\" % (now - dt.timedelta(minutes=2)) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The default string format of a `datetime` object corresponds to the [isoformat](https://en.wikipedia.org/wiki/ISO_8601). Using the `strftime` function, however, you can control string formatting yourself. The following example shows this feature together with other features we have learned before. The idea is to loop over time and generate corresponding string representations. We also store the `datetime` objects in a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "These are the ERAD 2016 conference days (incl. short courses):\n",
      "\tSunday, 09. October 2016\n",
      "\tMonday, 10. October 2016\n",
      "\tTuesday, 11. October 2016\n",
      "\tWednesday, 12. October 2016\n",
      "\tThursday, 13. October 2016\n",
      "\tFriday, 14. October 2016\n"
     ]
    }
   ],
   "source": [
    "start = dt.datetime(2016, 10, 9)\n",
    "end = dt.datetime(2016, 10, 14)\n",
    "interval = dt.timedelta(days=1)\n",
    "dtimes = []\n",
    "print(\"These are the ERAD 2016 conference days (incl. short courses):\")\n",
    "while start <= end:\n",
    "    print(start.strftime(\"\\t%A, %d. %B %Y\"))\n",
    "    dtimes.append(start)\n",
    "    start += interval    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[matplotlib](../python/mplintro.ipynb) generally understands `datetime` objects and tries to make sense of them in plots."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Instead of %matplotlib inline\n",
    "import matplotlib.pyplot as pl\n",
    "try:\n",
    "    get_ipython().magic(\"matplotlib inline\")\n",
    "except:\n",
    "    pl.ion()\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7efe4874a450>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create some dummy data\n",
    "level = np.linspace(100,0,len(dtimes))\n",
    "\n",
    "# And add a time series plot\n",
    "fig = pl.figure(figsize=(10,5))\n",
    "ax = fig.add_subplot(111)\n",
    "pl.plot(dtimes, level, \"bo\", linestyle=\"dashed\")\n",
    "pl.xlabel(\"Day of the conference\", fontsize=15)\n",
    "pl.ylabel(\"Relative attentiveness (%)\", fontsize=15)\n",
    "pl.title(\"Development of participants' attentiveness during the conference\", fontsize=15)\n",
    "pl.tick_params(labelsize=12)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
