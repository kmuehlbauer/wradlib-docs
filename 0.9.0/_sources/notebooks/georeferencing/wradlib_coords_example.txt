{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {
      "nbsphinx": "hidden"
     },
     "source": [
      "This notebook is part of the $\\omega radlib$ documentation: http://wradlib.org/wradlib-docs.\n",
      "\n",
      "Copyright (c) 2016, $\\omega radlib$ developers.\n",
      "Distributed under the MIT License. See LICENSE.txt for more info."
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {
      "collapsed": true
     },
     "source": [
      "Computing cartesian coordinates for polar data"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "import numpy as np\n",
      "import wradlib.georef as georef\n",
      "import wradlib.io as io\n",
      "import wradlib.util as util\n",
      "import warnings\n",
      "warnings.filterwarnings('ignore')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Read the data\n",
      "\n",
      "Here, we use an OPERA hdf5 dataset."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "filename = 'hdf5/20130429043000.rad.bewid.pvol.dbzh.scan1.hdf'\n",
      "filename = util.get_wradlib_data_file(filename)\n",
      "pvol = io.read_OPERA_hdf5(filename)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Count the number of datasets"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "ntilt = 1\n",
      "for i in range(100):\n",
      "    try:\n",
      "        pvol[\"dataset%d/what\" % ntilt]\n",
      "        ntilt += 1\n",
      "    except Exception:\n",
      "        ntilt -= 1\n",
      "        break"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Define radar location and scan geometry"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "nrays = int(pvol[\"dataset1/where\"][\"nrays\"])\n",
      "nbins = int(pvol[\"dataset1/where\"][\"nbins\"])\n",
      "rscale = int(pvol[\"dataset1/where\"][\"rscale\"])\n",
      "coord = np.empty((ntilt, nrays, nbins, 3))\n",
      "for t in range(ntilt):\n",
      "    elangle = pvol[\"dataset%d/where\" % (t + 1)][\"elangle\"]\n",
      "    coord[t, ...] = georef.sweep_centroids(nrays, rscale, nbins, elangle)\n",
      "# ascale = math.pi / nrays\n",
      "sitecoords = (pvol[\"where\"][\"lon\"], pvol[\"where\"][\"lat\"],\n",
      "              pvol[\"where\"][\"height\"])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Retrieve geographic coordinates (longitude and latitude)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "proj_radar = georef.create_osr(\"aeqd\", lat_0=pvol[\"where\"][\"lat\"],\n",
      "                               lon_0=pvol[\"where\"][\"lon\"])\n",
      "radius = georef.get_earth_radius(pvol[\"where\"][\"lat\"], proj_radar)\n",
      "\n",
      "lon, lat, height = georef.polar2lonlatalt_n(coord[..., 0],\n",
      "                                            np.degrees(coord[..., 1]),\n",
      "                                            coord[..., 2], sitecoords,\n",
      "                                            re=radius, ke=4. / 3.)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Reproject to Azimuthal Equidistant projection"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "x, y = georef.reproject(lon, lat, projection_target=proj_radar)\n",
      "\n",
      "test = x[0, 90, 0:960:60]\n",
      "print(test)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[  1.25472882e+02   1.51820610e+04   3.02382726e+04   4.52940127e+04\n",
        "   6.03491865e+04   7.54036988e+04   9.04574548e+04   1.05510360e+05\n",
        "   1.20562318e+05   1.35613236e+05   1.50663018e+05   1.65711570e+05\n",
        "   1.80758796e+05   1.95804603e+05   2.10848895e+05   2.25891578e+05]\n"
       ]
      }
     ],
     "prompt_number": 6
    }
   ],
   "metadata": {}
  }
 ]
}
